To achieve your goal of parsing the XML data and allowing LINQ queries on it, you can use a combination of LINQ to XML and C# collections like `List<T>`. Here's a step-by-step approach to how you can parse the XML data, extract the information, and store it in a list for easy querying.

First, ensure you have the necessary using directives:

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
```

### 1. Parse the XML Data
You need to parse the `AllSteps` and `AllVariables` XML data into respective lists. Let's start by defining a couple of classes to represent the data:

```csharp
public class StepModel
{
    public int StepId { get; set; }
    public string Name { get; set; }
    public int EFASDatablock { get; set; }
    public int EFASByte { get; set; }
    public int ESTRCDatablock { get; set; }
    public int ESTRCByte { get; set; }
    public int DateTimeDatablock { get; set; }
    public int DateTimeStartByte { get; set; }
    public string SelectedDateTimeType { get; set; }
    // Add other properties as needed
}

public class VariableModel
{
    public int VariableId { get; set; }
    public string Name { get; set; }
}
```

### 2. Extracting Data from XML

Here is how you can extract the `StepModel` and `VariableModel` data from the XML:

```csharp
XElement shapeElement = doc.Descendants().FirstOrDefault(e => (string)e.Attribute("Id") == shapeId);

if (shapeElement != null)
{
    var allStepsXml = shapeElement.Element("AllSteps")?.Value;
    var allVariablesXml = shapeElement.Element("AllVariables")?.Value;

    if (!string.IsNullOrEmpty(allStepsXml))
    {
        XElement allStepsElement = XElement.Parse(allStepsXml);
        List<StepModel> steps = allStepsElement.Descendants("StepModel")
            .Select(x => new StepModel
            {
                StepId = (int)x.Element("StepId"),
                Name = (string)x.Element("Name"),
                EFASDatablock = (int)x.Element("EFASDatablock"),
                EFASByte = (int)x.Element("EFASByte"),
                ESTRCDatablock = (int)x.Element("ESTRCDatablock"),
                ESTRCByte = (int)x.Element("ESTRCByte"),
                DateTimeDatablock = (int)x.Element("DateTimeDatablock"),
                DateTimeStartByte = (int)x.Element("DateTimeStartByte"),
                SelectedDateTimeType = (string)x.Element("SelectedDateTimeType")
                // Map other properties as needed
            }).ToList();

        // Now you can query the steps list using LINQ
        var stepNames = steps.Select(s => s.Name);
        foreach (var name in stepNames)
        {
            Console.WriteLine(name);
        }
    }

    if (!string.IsNullOrEmpty(allVariablesXml))
    {
        XElement allVariablesElement = XElement.Parse(allVariablesXml);
        List<VariableModel> variables = allVariablesElement.Descendants("VariableModel")
            .Select(x => new VariableModel
            {
                VariableId = (int)x.Element("VariableId"),
                Name = (string)x.Element("Name")
            }).ToList();

        // Now you can query the variables list using LINQ
        var variableNames = variables.Select(v => v.Name);
        foreach (var name in variableNames)
        {
            Console.WriteLine(name);
        }
    }
}
```

### Explanation:

1. **Parsing the XML Data**: 
   - The XML string contained in `AllSteps` and `AllVariables` is parsed using `XElement.Parse`.
   
2. **Mapping XML to C# Objects**: 
   - The `Descendants("StepModel")` method retrieves all `StepModel` elements from the `AllSteps` XML.
   - The `Select` method maps each XML element to an instance of the `StepModel` class.
   - Similarly, for `AllVariables`, the `Descendants("VariableModel")` method is used.

3. **Using LINQ for Queries**: 
   - Once the data is in a list, you can easily query it using LINQ. The example shows how to get all step names and variable names and print them.

This approach enables you to parse the nested XML data, store it in collections, and perform LINQ queries on it efficiently. Adjust the properties and mapping logic as needed based on the full structure of your XML data.